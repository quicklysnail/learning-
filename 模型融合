from __future__ import division
import numpy as np
import load_data
from sklearn.cross_validation import StratifiedKFold
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression

np.random.seed(0)  # seed to shuffle the train set

n_folds = 10
verbose = True
shuffle = False

if shuffle:
    idx = np.random.permutation(y.size)
    X = X[idx]
    y = y[idx]
    
skf = list(StratifiedKFold(y, n_folds))


clfs = [RandomForestClassifier(n_estimators=10,max_depth=9,min_samples_split=5,min_samples_leaf=10,max_features=5,oob_score=True , random_state =10),
        LogisticRegression(tol=1e-6,C=0.4,penalty='l2'),
        XGBClassifier(
            learning_rate=0.1,
            n_estimators =205,
            max_depth=6,
            min_child_weight =6,
            gamma = 0,
            subsample=0.9,
            colsample_bytree = 0.8,
            reg_alpha = 0.01,
            objective ='binary:logistic' ,
            nthread=4,
            scale_pos_weight=1,
            seed = 27
            )
       ]
print('为模型Blending创造训练集，测试集')

dataset_blend_train = np.zeros((X.shape[0], len(clfs)))
dataset_blend_test = np.zeros((X_submission.shape[0], len(clfs)))

for j, clf in enumerate(clfs):
        print j, clf
        dataset_blend_test_j = np.zeros((X_submission.shape[0], len(skf)))
        for i, (train, test) in enumerate(skf):
            print "Fold", i
            X_train = X[train]
            y_train = y[train]
            X_test = X[test]
            y_test = y[test]
            clf.fit(X_train, y_train)
            y_submission = clf.predict_proba(X_test)[:, 1]
            dataset_blend_train[test, j] = y_submission
            dataset_blend_test_j[:, i] = clf.predict_proba(X_submission)[:, 1]
        dataset_blend_test[:, j] = dataset_blend_test_j.mean(1)
        
print('训练集，测试集计算完成')

clf = LogisticRegression()
clf.fit(dataset_blend_train, y)
y_submission = clf.predict_proba(dataset_blend_test)[:, 1]
print('y_submission样子是：',y_submission.shape)

print('Linear stretch of predictions to [0,1]')
y_submission = (y_submission - y_submission.min()) / (y_submission.max() - y_submission.min())

print('保存结果')
print(y_submission.shape)
